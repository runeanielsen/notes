* Elixir
** Introduction
Elixir is a pragmatic approach to functional programming. It values functional foundations and it focuses on developer productivity.

Concurrency is the backbone of Elixir software. Elixir is made to free you from antiquated concurrency mechanisms.

*** Functional language
A functional language lets us think in terms of functions that transform data. This transformation never mutates data. Instead, each application of a function potentially creates a new, fresh version of the data. This reduces the need for data-synchronization mechanisms.

*** Macros
Elixir empowers developers by providing macros. Elixir code is nothing more than data, and therefore can be manipulated via macros like any other value in the language.

*** Erlang VM
In the Erlang VM everything runs in tiny concurrent processes, each with its own state. All communication happens by message-passing, exchanging messages between differnet machines on the same network transparently by the VM, making it a perfect environment for building distributed software.

*** Functions are data transformers
Elixir lets us solve problems in the same way that Unix shell does. Rather than command-line utilities, we have functions. These functions we can string together as we please. The smaller and focused they are, the easier they're to reuse and combine.

If we want, we can make these functions run in parallel, Elixir has a simple but powerful mechanism for passing messages between them. This mechanism provides the potential to run millions of them on a single machine and have hundreds of these machines inter-operating.

Bruce Tate commented on this paragraph with this thought:
#+begin_quote
Most programmers treat threads and processes as a necessary evil; Elixir developers feel they are an important simplification. --- Bruce Tate
#+end_quote

*** Compile and Run
Elixir files will typically have the extension =.ex= or =.exs=. This is a convention--files ending in '.ex' are intended to be compiled into byte codes and then run, whereas those ending in =.exs.= are more like programs in scripting languages and are effectively interpreted at the source level.

When you write tests for Elixir programs, you'll see that the application files have =.ex= extensions, whereas the tests have =.exs= because we don't need to keep compiled versions of the tests lying around.

** Assignment
In Elixir, the equals sign is not an assignment. Instead it's like an assertion. It succeeds if Elixir can find a way of making the left-hand side equal the right-hand side. Elixir calls the ~=~ symbol the match operator.

*** Elixir can match true by binding the variable
In this case, the left-hand side is a variable and the right-hand side is an integer literal, so Elixir can make the match true by binding the variable ~a~ to value ~1~.

#+begin_src iex
iex> a = 1
1
iex> a + 3
4
#+end_src

**** Example of incorrect match
The second line of code, ~1 = a~. It's another match, and it passes. The variable =a= already has the value =1= (it was set in the first line), so what's on the left of the equals sign is the same as what's on the right, and the match succeeds. But the third line, ~2 = a~, raises an error. You might expect it to assign =2= to =a=, as that would make the match succeed, but Elixir will only change the variable of a variable on the left side of an equals sign and replace it with the =value= on the right side. The failing line of code is the same as ~2 = 1~, which causes an error.

#+begin_src iex
iex> a = 1
1
iex> 1 = 1
1
iex> 2 = a
(MatchError) no match of right hand side value: 1
#+end_src

**** More complex matches
Elixir looks for a way to make the value of the left side the same as the value of the right side. The left side is a list containing three variables, and the right is a list of three values, so the two sides could be made the same by setting the variables to the corresponding values.

Elixir calls this process /pattern matching/. A pattern (the left side) is matched if the values (the right side) have the same structure and if each term in the pattern can be matched to the corresponding term in the values. A literal value in the pattern matches that exact value, and a variable in the pattern matches by taking on the corresponding value.

#+begin_src iex
iex> list = [ 1, 2, 3 ]
[1, 2, 3]
iex> [a, b, c ] = list
[1, 2, 3 ]
iex> a
1
iex> b
2
iex> c
3
#+end_src

Another example.

#+begin_src iex
iex> list = [1, 2, [3, 4, 5]]
[1, 2, [3, 4, 5]]
iex> [a, b, c] = list
[1, 2, [3, 4 ,5]]
iex> a
1
iex> b
2
iex> c
[3, 4, 5]
#+end_src

Example with a pattern containing some values and variables

#+begin_src iex
iex> list = [1, 2, 3]
[1, 2, 3]
iex> [a, 2, b] = list
[1, 2, 3]
iex> a
a
iex> b
3
#+end_src

**** Ignore a Value with _ (Underscore)
If we don't need to capture a value doing a match, we could use the special variable =_=. This acts like a variable but immediately discards any value given to it in a pattern match.

#+begin_src iex
iex> [1, _, _] = [ 1, 2 ,3]
[1, 2, 3]
iex> [1, _, _] = [1, "cat", "dog"]
[1, "cat", "dog"]
#+end_src

**** Variables bind once (per Match)
Once a variable has been bound to a value in matching process, it keeps that value for the remainder of the match.

#+begin_src iex
iex> [a, a] = [1, 1]
[1, 1]
iex> a
1
iex> [b, b] = [1, 2]
(MatchError) no match of right hand side vlaue: [1, 2]
#+end_src

- The first expression in this example succeeds because =a= is initially matched with the first =1= on the right side.
- the second expression, the first =b= matches the =1=. But the second =b= corresponds to the value 2 on the right. =b= cannot have two different values, and so the match fails.

If you want to force Elixir to use the existing value of the variable in the pattern, then prefix it with =^= (a caret). In Elixir we call this the /pin operator/.

#+begin_src iex
iex> a = 1
1
iex> a = 2
2
iex> ^a = 1
(MatchError) no match of right hand side value: 1
#+end_src

This also works if the variable is a component of a pattern:

#+begin_src iex
iex> a = 1
1
iex> [^a, 2, 3] = [1, 2, 3]
[1, 2, 3]
iex> a = 2
2
iex> [^a, 2] = [1, 2]
(MatchError) no match of right hand side value: [1, 2]
#+end_src

**** Another way of looking at the Equals Sign
Elixir's pattern matching is similar to Erlang's. The main difference being that Elixir allows a match to reassign to a variable that was assigned in a prior match, whereas in Erlang a variable can be assigned only once.

Joe Armstrong, Erlang's creator, compares the equals sign in Erlang to that used in algebra. When you write the equation ~x = a + 1~, you are not assigning the value of ~a + 1~ to =x=. Instead you're simply asserting that the expressions =x= and ~a + 1~ have the same value. If you know the value of =x=, you can work out the value of =a=, and vice versa.

His point is that you had to unlearn the algebraic meaning of === when you first came across assignment in imperative programming languages.

** Immutability
In Elixir, all values are immutable. The most complex nested list, the database record - these things behave just like the simplest integer. Their values are all immutable.

In Elixir, once a variable references a list such as ~[1,2,3]~, you know it will always reference those same variables (until you rebind the variable). This makes concurrency a lot less dangerous.

But what if you need to add 100 to each element in ~[1,2,3]~? Elixir does it by producing a copy of the original, containing the new values. The original remains unchanged, and your operation will not affect any other code holding a reference to that original.

This fits with the idea that programming is about transforming data. When we update ~[1,2,3]~, we don't hack it in place. Instead we transform it into something new.

*** Performance implications of immutability
It would be easy to assume that enforcing immutability is inefficient. Because it would result in a lot of old values around to be garbage-collected.

**** Copying data
Common sense might dictate that all this copying of data is inefficient, the reverse is true. Because Elixir knows that existing data is immutable, it can reuse it, in part or as a whole, when building new structures.

The following code. It uses a new operator, ~[ head | tail]~, which builds a new list with =head= as its first element and =tail= as the rest.

#+begin_src iex
iex> list1 = [3, 2, 1]
[3, 2, 1]
iex> list2 = [ 4 | list1 ]
[4, 3, 2, 1]
#+end_src

In most languages, =list2= would be built by creating a new list containing the values 4, 3, 2, and 1. The three values in =list1= would be copied into the tail of =list2=. And that would be necessary because =list1= would be mutable.

But Elixir knows =list1= will never change, so it simply constructs a new list with a head of 4 and a tail of =list4=.

**** Garbage collection
The other performance issue with a transformational language is that you quite often end up leaving old values unused when you create new values from them. This leaves a bunch of things using up memory on the heap, so garbage collection has to reclaim them.

Most modern languages have a garbage collector, and developers have grown to be suspicious of them, they can impact performance quite badly.

In Elixir you write your code using lots and lots of processes, and each process has its own heap. The data in your application is divided up between these processes, so each individual heap is much, much smaller than would have been the case if all the data had been in a single heap. As a result, garbage collection runs faster. If a process terminates before its heap becomes full, all its data is discarded, meaning no garbage collection is required.

**** Coding with immutable data
Once you accept the concept, coding with immutable data is surprisingly easy. You just have to remember that any function that transforms data will return a new copy of it. Thus, we never capitalize a string. Instead, we return a capitalized copy of a string.

#+begin_src iex
iex> name = "elixir"
"elixir"
iex> cap_name = String.capitalize name
"Elixir"
iex> name
"elixir"
#+end_src

In object-oriented languages you would most of the time solve it by saying ~name.capitalize()~. But in object-oriented languages, objects mostly have mutable state. When you make a call such as ~name.capitalize()~ you have no immediate indication whether you are changing the internal representation of the name, returning a capitalized copy, or both. There's plenty of scope of ambiguity.

In a functional language, we always transform data. We never modify it in place.

** Elixir basics
Elixir's built-in types:

- Value types:
  - Arbitrary-sized integers
  - Floating-point numbers
  - Atoms
  - Ranges
  - Regular expressions
- System types:
  - PIDs and ports
  - References
- Collection types:
  - Tuples
  - Lists
  - Maps
  - Binaries

Functions are a type too. They have their own chapter, following this one.

You might be surprised that list doesn't include things such as strings and structures. Elixir has them, but they are built using the basic types from the list.

There are some debate about whether regular expressions and ranges are value types. Technically they aren't - under the hood they are just structures. But its convenient to treat them as distinct types.

*** Value types
The value types in Elixir represent numbers, names, ranges, and regular expressions.

**** Integers
Integer literals can be written as decimal =1234=, hexadecimal =0xcafe=, octal =0o765=, and binary =0b1010=.

Decimal numbers may contain underscores these are often used to separate groups of three groups of three digits when writing large numbers, so one million could be written ~1_000_000~.

There is no fixed limit on the size of integers, their internal representation grows to fit their magnitude.

**** Floating-point numbers
Floating-point numbers are written using a decimal point. There must be at least one digit before and after the decimal point. An optional trailing exponent may be given. These are all valid floating-point literals:

~1.0    0.2456    0.314159e1    314159.0e-5~

Floats are IEEE 754 double precision, giving them about 16 digits of accuracy and a maximum exponent of around 10^308.

**** Atoms
=Atoms= are constants that represents something's name. We write them using a leading colon =:= which can be followed by an atom word or an Elixir operator. An atom word is a sequence of =UTF-8= letters (including combination-marks), digits, underscores, and at signs =@=. It may end with an exclamation point of a question mark. You can also create atoms containing arbitrary characters by enclosing the characters following the colon in double quotes. These are all atoms:

~:fred    :is_binary?    :var@2    :<>    :===    :"func/3"    :"long john silver"~

An atom's name is its value. Two atoms with the same name will always compare as equal, even if they were created by different applications on two computers separated by an ocean.

**** Ranges
~Ranges~ are represented as /start..end/, where =start= and =end= are integers.

** Thanks to
[[https://pragprog.com/titles/elixir16/programming-elixir-1-6/][Programming Elixir 1.6]]
